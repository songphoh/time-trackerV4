process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const compression = require('compression'); // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° compression
const path = require('path');
const axios = require('axios');

// ‡πÉ‡∏ä‡πâ optimized db pool
const db = require('./db-adapter');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
process.env.TZ = 'Asia/Bangkok';

console.log('Server Timezone:', process.env.TZ);
console.log('Current server time:', new Date().toString());
console.log('Current server time (ISO):', new Date().toISOString());
console.log('Current server time (Locale):', new Date().toLocaleString('th-TH'));

const app = express();
const port = process.env.PORT || 3000;

// ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° compression middleware
app.use(compression({
  filter: (req, res) => {
    if (req.headers['x-no-compression']) {
      return false;
    }
    return compression.filter(req, res);
  },
  level: 6,
  threshold: 1024
}));

// ‚≠ê Performance monitoring middleware
app.use((req, res, next) => {
  const start = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    if (duration > 2000) {
      console.warn(`üêå Slow request: ${req.method} ${req.url} took ${duration}ms`);
    } else if (duration > 1000) {
      console.log(`‚ö†Ô∏è Long request: ${req.method} ${req.url} took ${duration}ms`);
    }
  });
  
  next();
});

// Debug router
const debugRouter = require('./debug');
app.use('/debug', debugRouter);

// Basic middleware
app.use(cors());
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));

// Static files
app.use(express.static(path.join(__dirname, 'public')));
app.use('/admin', express.static(path.join(__dirname, 'public', 'admin')));

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} | ${req.method} ${req.url}`);
  next();
});

// ‚≠ê Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡πà‡∏≠‡∏¢
let employeeCache = null;
let employeeCacheTime = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ

async function getEmployeesFromCache() {
  const now = Date.now();
  if (!employeeCache || (now - employeeCacheTime) > CACHE_DURATION) {
    console.log('üîÑ Refreshing employee cache...');
    const result = await const db = require('./db-adapter');(db.preparedStatements.GET_ACTIVE_EMPLOYEES, ['active']);
    employeeCache = result.rows.map(e => [e.full_name, e.emp_code]);
    employeeCacheTime = now;
  }
  return employeeCache;
}

// ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á cache
function clearEmployeeCache() {
  employeeCache = null;
  employeeCacheTime = 0;
}

// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function initializeDatabase() {
  console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á...');
  
  try {
    await db.withTransaction(async (client) => {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á employees
      await client.query(`
        CREATE TABLE IF NOT EXISTS employees (
          id SERIAL PRIMARY KEY,
          emp_code TEXT NOT NULL UNIQUE,
          full_name TEXT NOT NULL,
          position TEXT,
          department TEXT,
          line_id TEXT,
          line_name TEXT,
          line_picture TEXT,
          status TEXT DEFAULT 'active',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
      console.log('‡∏ï‡∏≤‡∏£‡∏≤‡∏á employees ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á time_logs
      await client.query(`
        CREATE TABLE IF NOT EXISTS time_logs (
          id SERIAL PRIMARY KEY,
          employee_id INTEGER NOT NULL,
          clock_in TIMESTAMP,
          clock_out TIMESTAMP,
          note TEXT,
          latitude_in REAL,
          longitude_in REAL,
          latitude_out REAL,
          longitude_out REAL,
          line_id TEXT,
          line_name TEXT,
          line_picture TEXT,
          status TEXT DEFAULT 'normal',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (employee_id) REFERENCES employees(id)
        )
      `);
      console.log('‡∏ï‡∏≤‡∏£‡∏≤‡∏á time_logs ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á settings
      await client.query(`
        CREATE TABLE IF NOT EXISTS settings (
          id SERIAL PRIMARY KEY,
          setting_name TEXT NOT NULL UNIQUE,
          setting_value TEXT,
          description TEXT
        )
      `);
      console.log('‡∏ï‡∏≤‡∏£‡∏≤‡∏á settings ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');

      // ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance
      await client.query(`
        -- Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        CREATE INDEX IF NOT EXISTS idx_employees_emp_code ON employees(emp_code);
        CREATE INDEX IF NOT EXISTS idx_employees_full_name ON employees(full_name);
        CREATE INDEX IF NOT EXISTS idx_employees_status ON employees(status);
        
        -- Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ time logs
        CREATE INDEX IF NOT EXISTS idx_time_logs_employee_id ON time_logs(employee_id);
        CREATE INDEX IF NOT EXISTS idx_time_logs_clock_in_date ON time_logs(DATE(clock_in));
        CREATE INDEX IF NOT EXISTS idx_time_logs_employee_date ON time_logs(employee_id, DATE(clock_in));
        
        -- Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö settings
        CREATE INDEX IF NOT EXISTS idx_settings_name ON settings(setting_name);
      `);
      
      console.log('‚úÖ Database tables and indexes created');
    });
    
    await addInitialSettings();
    await addSampleEmployees();
    
    console.log('‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
  } catch (err) {
    console.error('‚ùå Error initializing database:', err.message);
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
async function addInitialSettings() {
  try {
    const countResult = await db.query('SELECT COUNT(*) as count FROM settings');
    
    if (parseInt(countResult.rows[0].count) === 0) {
      console.log('üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...');
      
      const settings = [
        { name: 'organization_name', value: '‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏±‡∏ß‡∏ô‡∏≤', desc: '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô' },
        { name: 'work_start_time', value: '08:30', desc: '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô' },
        { name: 'work_end_time', value: '16:30', desc: '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô' },
        { name: 'allowed_ip', value: '', desc: 'IP Address ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' },
        { name: 'telegram_bot_token', value: '', desc: 'Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Telegram Bot' },
        { name: 'telegram_groups', value: '[{"name":"‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å","chat_id":"","active":true}]', desc: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram' },
        { name: 'notify_clock_in', value: '1', desc: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤' },
        { name: 'notify_clock_out', value: '1', desc: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å' },
        { name: 'admin_username', value: 'admin', desc: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' },
        { name: 'admin_password', value: 'admin123', desc: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' },
        { name: 'liff_id', value: '2001032478-VR5Akj0k', desc: 'LINE LIFF ID' },
        { name: 'time_offset', value: '420', desc: '‡∏Ñ‡πà‡∏≤‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ô‡∏≤‡∏ó‡∏µ)' },
        { name: 'gas_web_app_url', value: 'https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec', desc: 'URL ‡∏Ç‡∏≠‡∏á Google Apps Script Web App' },
        { name: 'use_gas_for_telegram', value: '1', desc: '‡πÉ‡∏ä‡πâ Google Apps Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Telegram (1=‡πÉ‡∏ä‡πâ, 0=‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ)' }
      ];
      
      for (const setting of settings) {
        await db.query(
          'INSERT INTO settings (setting_name, setting_value, description) VALUES ($1, $2, $3)',
          [setting.name, setting.value, setting.desc]
        );
      }
      
      console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° settings ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      const newSettings = [
        { name: 'gas_web_app_url', value: 'https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec', desc: 'URL ‡∏Ç‡∏≠‡∏á Google Apps Script Web App' },
        { name: 'use_gas_for_telegram', value: '1', desc: '‡πÉ‡∏ä‡πâ Google Apps Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Telegram (1=‡πÉ‡∏ä‡πâ, 0=‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ)' }
      ];
      
      for (const setting of newSettings) {
        const checkResult = await db.query('SELECT setting_name FROM settings WHERE setting_name = $1', [setting.name]);
        
        if (checkResult.rows.length === 0) {
          await db.query(
            'INSERT INTO settings (setting_name, setting_value, description) VALUES ($1, $2, $3)',
            [setting.name, setting.value, setting.desc]
          );
          console.log(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ${setting.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        }
      }
    }
  } catch (err) {
    console.error('‚ùå Error adding initial settings:', err.message);
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
async function addSampleEmployees() {
  try {
    const countResult = await db.query('SELECT COUNT(*) as count FROM employees');
    
    if (parseInt(countResult.rows[0].count) === 0) {
      console.log('üë• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...');
      
      const employees = [
        { code: '001', name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', position: '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£', department: '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£' },
        { code: '002', name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', position: '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà', department: '‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£' }
      ];
      
      for (const emp of employees) {
        await db.query(
          'INSERT INTO employees (emp_code, full_name, position, department) VALUES ($1, $2, $3, $4)',
          [emp.code, emp.name, emp.position, emp.department]
        );
      }
      
      console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    }
  } catch (err) {
    console.error('‚ùå Error adding sample employees:', err.message);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
initializeDatabase();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡πá‡∏ô‡∏ï‡πå
function adjustClientTime(clientTime) {
  try {
    const clientDate = new Date(clientTime);
    if (isNaN(clientDate.getTime())) {
      return new Date().toISOString();
    }
    return clientDate.toISOString();
  } catch (error) {
    console.error('‚ùå Error adjusting client time:', error);
    return new Date().toISOString();
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin
function processAdminDateTime(timeString) {
  if (!timeString) return null;
  
  console.log('üïê Processing admin time input:', timeString);
  
  try {
    let resultDate;
    
    // ‡∏Å‡∏£‡∏ì‡∏µ datetime-local ‡∏à‡∏≤‡∏Å HTML input (YYYY-MM-DDTHH:MM)
    if (timeString.includes('T') && timeString.length === 16) {
      const fullDateTime = timeString + ':00';
      console.log('üìù Full datetime string:', fullDateTime);
      
      resultDate = new Date(fullDateTime);
      
      if (isNaN(resultDate.getTime())) {
        throw new Error('Invalid date object created');
      }
      
      console.log('üìÖ Local date object:', resultDate.toString());
      console.log('üåç Local time (Thai assumed):', resultDate.toLocaleString('th-TH'));
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC ‡πÇ‡∏î‡∏¢‡∏•‡∏ö 7 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      const utcDate = new Date(resultDate.getTime() - (7 * 60 * 60 * 1000));
      console.log('üåê UTC date object:', utcDate.toString());
      console.log('üì§ Final UTC ISO:', utcDate.toISOString());
      
      return utcDate.toISOString();
    }
    
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ timezone info ‡πÅ‡∏•‡πâ‡∏ß
    if (timeString.includes('Z') || timeString.includes('+') || timeString.includes('-')) {
      resultDate = new Date(timeString);
      if (isNaN(resultDate.getTime())) {
        throw new Error('Invalid date with timezone info');
      }
      console.log('‚úÖ Already has timezone info, using as-is:', resultDate.toISOString());
      return resultDate.toISOString();
    }
    
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    resultDate = new Date(timeString);
    if (isNaN(resultDate.getTime())) {
      throw new Error('Cannot parse date string: ' + timeString);
    }
    
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC
    const utcDate = new Date(resultDate.getTime() - (7 * 60 * 60 * 1000));
    console.log('üîÑ General conversion to UTC:', utcDate.toISOString());
    return utcDate.toISOString();
    
  } catch (error) {
    console.error('‚ùå Error processing time:', error.message);
    console.error('üìã Input was:', timeString);
    
    const fallbackTime = new Date().toISOString();
    console.log('üÜò Using fallback time (current time):', fallbackTime);
    return fallbackTime;
  }
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
function calculateDuration(startDate, endDate) {
  const diff = Math.abs(endDate - startDate);
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  return `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
}

// ‚≠ê API - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö autocomplete (‡πÉ‡∏ä‡πâ cache)
app.post('/api/getdata', async (req, res) => {
  console.log('üìã API: getdata - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö autocomplete');
  
  try {
    const result = await db.query(db.preparedStatements.GET_EMPLOYEE_NAMES, ['active']);
    const names = result.rows.map(e => e.full_name);
    res.json(names);
  } catch (err) {
    console.error('‚ùå Error in getdata:', err.message);
    return res.json({ error: err.message });
  }
});

// ‚≠ê API - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ cache)
app.post('/api/getemployee', async (req, res) => {
  console.log('üë• API: getemployee - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  
  try {
    const employees = await getEmployeesFromCache();
    res.json(employees);
  } catch (err) {
    console.error('‚ùå Error in getemployee:', err.message);
    return res.json({ error: err.message });
  }
});

// ‚≠ê API - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
app.post('/api/clockin', async (req, res) => {
  console.log('‚è∞ API: clockin - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤', req.body);
  
  try {
    const { 
      employee, 
      userinfo, 
      lat, 
      lon, 
      line_name, 
      line_picture, 
      client_time 
    } = req.body;
    
    if (!employee) {
      return res.json({ msg: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    // ‡πÉ‡∏ä‡πâ prepared statement
    const empResult = await db.query(db.preparedStatements.GET_EMPLOYEE_BY_CODE, [employee]);
    
    if (empResult.rows.length === 0) {
      return res.json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    const emp = empResult.rows[0];
    const today = new Date().toISOString().split('T')[0];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡πâ‡∏≥
    const checkExistingResult = await db.query(db.preparedStatements.CHECK_CLOCK_IN_TODAY, [emp.id, today]);
    
    if (checkExistingResult.rows.length > 0) {
      return res.json({ 
        msg: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', 
        employee
      });
    }
    
    const now = client_time ? adjustClientTime(client_time) : new Date().toISOString();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
    await db.query(db.preparedStatements.INSERT_TIME_LOG, [
      emp.id, now, userinfo || null, lat || null, lon || null, line_name || null, line_picture || null
    ]);
    
    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)
    setImmediate(async () => {
      try {
        await sendNotification('clock_in', employee, now, userinfo, lat, lon, line_name);
      } catch (error) {
        console.error('‚ùå Notification error:', error);
      }
    });
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
    const date = new Date(now);
    const hours = String(date.getUTCHours() + 7).padStart(2, '0');
    const minutes = String(date.getUTCMinutes()).padStart(2, '0');
    const seconds = String(date.getUTCSeconds()).padStart(2, '0');
    const returnDate = `${hours}:${minutes}:${seconds}`;
    
    return res.json({
      msg: 'SUCCESS',
      employee,
      return_date: returnDate,
      return_date_utc: now
    });
  } catch (error) {
    console.error('‚ùå Error in clockin:', error);
    return res.json({ msg: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// ‚≠ê API - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
app.post('/api/clockout', async (req, res) => {
  console.log('üèÉ API: clockout - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å', req.body);
  
  try {
    const { 
      employee, 
      lat, 
      lon, 
      line_name, 
      line_picture, 
      client_time 
    } = req.body;
    
    if (!employee) {
      return res.json({ msg: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    const empResult = await db.query(db.preparedStatements.GET_EMPLOYEE_BY_CODE, [employee]);
    
    if (empResult.rows.length === 0) {
      return res.json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    const emp = empResult.rows[0];
    const today = new Date().toISOString().split('T')[0];
    
    const recordResult = await db.query(db.preparedStatements.GET_TODAY_RECORD, [emp.id, today]);
    
    if (recordResult.rows.length === 0) {
      return res.json({ 
        msg: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', 
        employee
      });
    }
    
    const record = recordResult.rows[0];
    
    if (record.clock_out) {
      return res.json({ 
        msg: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', 
        employee
      });
    }
    
    const now = client_time ? adjustClientTime(client_time) : new Date().toISOString();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å
    await db.query(db.preparedStatements.UPDATE_CLOCK_OUT, [
      now, lat || null, lon || null, line_name || null, line_picture || null, record.id
    ]);
    
    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)
    setImmediate(async () => {
      try {
        await sendNotification('clock_out', employee, now, null, lat, lon, line_name);
      } catch (error) {
        console.error('‚ùå Notification error:', error);
      }
    });
    
    const date = new Date(now);
    const hours = String(date.getUTCHours() + 7).padStart(2, '0');
    const minutes = String(date.getUTCMinutes()).padStart(2, '0');
    const seconds = String(date.getUTCSeconds()).padStart(2, '0');
    const returnDate = `${hours}:${minutes}:${seconds}`;
    
    return res.json({
      msg: 'SUCCESS',
      employee,
      return_date: returnDate,
      return_date_utc: now
    });
  } catch (error) {
    console.error('‚ùå Error in clockout:', error);
    return res.json({ msg: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram
app.post('/api/sendnotify', async (req, res) => {
  console.log('üì¢ API: sendnotify - ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram', req.body);
  
  try {
    const { message, token, chat_id, lat, lon } = req.body;
    
    if (!token || !chat_id || !message) {
      return res.json({ success: false, msg: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }
    
    let notifyMessage = message;
    
    if (lat && lon) {
      notifyMessage += `\n‡∏û‡∏¥‡∏Å‡∏±‡∏î: https://www.google.com/maps?q=${lat},${lon}`;
    }
    
    console.log('Sending Telegram message:', notifyMessage);
    
    try {
      const response = await axios.post(
        `https://api.telegram.org/bot${token}/sendMessage`,
        {
          chat_id: chat_id,
          text: notifyMessage
        },
        { timeout: 10000 }
      );
      
      console.log('Telegram response:', response.data);
      res.json({ success: true });
    } catch (error) {
      console.error('Error sending Telegram message:', error.response?.data || error.message);
      res.json({ success: false, error: error.response?.data?.message || error.message });
    }
  } catch (error) {
    console.error('Error in sendnotify:', error);
    res.json({ success: false, error: error.message });
  }
});

// ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
async function sendNotification(type, employee, timestamp, userinfo, lat, lon, line_name) {
  try {
    const notifySettingResult = await db.query(
      'SELECT setting_value FROM settings WHERE setting_name = $1',
      [type === 'clock_in' ? 'notify_clock_in' : 'notify_clock_out']
    );

    if (notifySettingResult.rows.length === 0 || notifySettingResult.rows[0].setting_value !== '1') {
      return;
    }

    const date = new Date(timestamp);
    const thaiFormatter = new Intl.DateTimeFormat('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      weekday: 'long'
    });
    const thaiDate = thaiFormatter.format(date);

    const hours = String(date.getUTCHours() + 7).padStart(2, '0');
    const minutes = String(date.getUTCMinutes()).padStart(2, '0');
    const seconds = String(date.getUTCSeconds()).padStart(2, '0');
    const returnDate = `${hours}:${minutes}:${seconds}`;

    const location = lat && lon ? `${lat}, ${lon}` : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";

    let message = type === 'clock_in' 
      ? `‚è± ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô\n`
      : `‚è± ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô\n`;
    
    message += `üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: *${employee}*\n`;
    message += `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: *${thaiDate}*\n`;
    message += `üïí ‡πÄ‡∏ß‡∏•‡∏≤: *${returnDate}*\n`;
    
    if (line_name) message += `üí¨ ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏•‡∏ô‡πå: *${line_name}*\n`;
    if (userinfo && type === 'clock_in') message += `üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: *${userinfo}*\n`;
    if (lat && lon) {
      message += `üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î: *${location}*\n`;
      message += `üó∫ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: [‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà](https://www.google.com/maps/place/${lat},${lon})`;
    } else {
      message += "üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î: *‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•*";
    }

    await sendTelegramToAllGroups(message, lat, lon, employee);
  } catch (error) {
    console.error('‚ùå Error in sendNotification:', error);
  }
}

// ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Telegram ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1)
async function sendTelegramToAllGroups(message, lat, lon, employee) {
  try {
    const [tokenResult, gasUrlResult, groupsResult] = await Promise.all([
      db.query('SELECT setting_value FROM settings WHERE setting_name = $1', ['telegram_bot_token']),
      db.query('SELECT setting_value FROM settings WHERE setting_name = $1', ['gas_web_app_url']),
      db.query('SELECT setting_value FROM settings WHERE setting_name = $1', ['telegram_groups'])
    ]);
    
    if (tokenResult.rows.length === 0 || !tokenResult.rows[0].setting_value) {
      console.error('‚ùå Error getting Telegram token or token not set');
      return;
    }
    
    let gasUrl = 'https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec';
    if (gasUrlResult.rows.length > 0 && gasUrlResult.rows[0].setting_value) {
      gasUrl = gasUrlResult.rows[0].setting_value.trim();
    } else {
      console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏Ç‡∏≠‡∏á GSA ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
    }
    
    if (groupsResult.rows.length === 0 || !groupsResult.rows[0].setting_value) {
      console.error('‚ùå No Telegram groups configured');
      return;
    }
    
    const token = tokenResult.rows[0].setting_value;
    
    try {
      const groups = JSON.parse(groupsResult.rows[0].setting_value);
      
      // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö parallel
      const promises = groups
        .filter(group => group.active && group.chat_id)
        .map(async (group) => {
          try {
            console.log(`Sending message to ${group.name} (${group.chat_id}) via GSA`);
            
            const jsonData = {
              message: message,
              chatId: group.chat_id,
              token: token
            };
            
            if (lat && lon) {
              jsonData.lat = lat;
              jsonData.lon = lon;
            }
            
            const encodedData = encodeURIComponent(JSON.stringify(jsonData));
            const urlWithParams = `${gasUrl}?opt=sendToTelegram&data=${encodedData}`;
            
            console.log('Sending request to GSA:', urlWithParams);
            
            const response = await axios.get(urlWithParams, { timeout: 10000 });
            
            console.log(`‚úÖ Message sent to ${group.name} via GSA successfully:`, response.data);
            return response.data;
          } catch (error) {
            console.error(`‚ùå Error sending message to ${group.name} via GSA:`, error.message);
            console.error('Error details:', error.response?.data || error);
            return null;
          }
        });
    
      await Promise.allSettled(promises);
    } catch (error) {
      console.error('‚ùå Error parsing Telegram groups:', error.message);
    }
  } catch (error) {
    console.error('‚ùå Error in sendTelegramToAllGroups:', error.message);
  }
}

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á Google Apps Script
app.post('/api/admin/set-gas-url', async (req, res) => {
  console.log('üîß API: admin/set-gas-url - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á GSA', req.body);
  
  try {
    const { gas_url } = req.body;
    
    if (!gas_url) {
      return res.json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ URL' });
    }
    
    await db.query(
      'INSERT INTO settings (setting_name, setting_value, description) VALUES ($1, $2, $3) ON CONFLICT (setting_name) DO UPDATE SET setting_value = $2',
      ['gas_web_app_url', gas_url, 'URL ‡∏Ç‡∏≠‡∏á Google Apps Script Web App']
    );
    
    console.log('GAS URL updated:', gas_url);
    res.json({ success: true, message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
  } catch (error) {
    console.error('Error setting GAS URL:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô GSA
app.post('/api/admin/test-gas', async (req, res) => {
  console.log('üß™ API: admin/test-gas - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô GSA', req.body);
  
  try {
    const { message, lat, lon, gasUrl } = req.body;
    
    if (!message) {
      return res.json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°' });
    }
    
    let useGasUrl = gasUrl;
    
    if (!useGasUrl) {
      const gasUrlResult = await db.query(
        'SELECT setting_value FROM settings WHERE setting_name = $1',
        ['gas_web_app_url']
      );
      
      if (gasUrlResult.rows.length === 0 || !gasUrlResult.rows[0].setting_value) {
        return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏Ç‡∏≠‡∏á GSA ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô' });
      }
      
      useGasUrl = gasUrlResult.rows[0].setting_value.trim();
    } else {
      useGasUrl = useGasUrl.trim();
    }
    
    if (!useGasUrl.startsWith('https://')) {
      return res.json({ success: false, message: 'URL ‡∏Ç‡∏≠‡∏á GSA ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ https://' });
    }
    
    console.log('‡πÉ‡∏ä‡πâ URL GSA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', useGasUrl);
    
    const [tokenResult, groupsResult] = await Promise.all([
      db.query('SELECT setting_value FROM settings WHERE setting_name = $1', ['telegram_bot_token']),
      db.query('SELECT setting_value FROM settings WHERE setting_name = $1', ['telegram_groups'])
    ]);
    
    if (tokenResult.rows.length === 0 || !tokenResult.rows[0].setting_value) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏Ç‡∏≠‡∏á Telegram ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô' });
    }
    
    if (groupsResult.rows.length === 0 || !groupsResult.rows[0].setting_value) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏° Telegram ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô' });
    }
    
    const token = tokenResult.rows[0].setting_value;
    const groups = JSON.parse(groupsResult.rows[0].setting_value);
    const activeGroup = groups.find(g => g.active && g.chat_id);
    
    if (!activeGroup) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° Telegram ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });
    }
    
    const jsonData = {
      message: message,
      chatId: activeGroup.chat_id,
      token: token
    };
    
    if (lat && lon) {
      jsonData.lat = lat;
      jsonData.lon = lon;
    }
    
    console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ GSA:', JSON.stringify(jsonData));
    
    const encodedData = encodeURIComponent(JSON.stringify(jsonData));
    const urlWithParams = `${useGasUrl}?opt=sendToTelegram&data=${encodedData}`;
    
    console.log('URL ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å:', urlWithParams);
    
    const response = await axios.get(urlWithParams, { timeout: 15000 });
    
    console.log('‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å GSA:', response.data);
    res.json({ 
      success: true, 
      message: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 
      response: response.data 
    });
  } catch (error) {
    console.error('Error testing GAS:', error);
    console.error('Error details:', error.response?.data || error);
    res.json({ 
      success: false, 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message,
      error: error.response?.data || error.message
    });
  }
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ GSA ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
async function isUsingGasForTelegram() {
  try {
    const result = await db.query(
      'SELECT setting_value FROM settings WHERE setting_name = $1',
      ['use_gas_for_telegram']
    );
    
    if (result.rows.length > 0) {
      return result.rows[0].setting_value === '1';
    }
    
    return true; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏ä‡πâ GSA
  } catch (error) {
    console.error('Error checking if using GAS for Telegram:', error.message);
    return true;
  }
}

// --- API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ---

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
app.post('/api/admin/login', async (req, res) => {
  console.log('üîê API: admin/login - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', req.body);
  
  try {
    const { username, password } = req.body;
    
    if (!username || !password) {
      return res.json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
    }
    
    console.log(`Login attempt: ${username}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô admin/admin123 ‡∏Å‡πà‡∏≠‡∏ô
    if (username === 'admin' && password === 'admin123') {
      console.log('Admin login successful with default credentials');
      return res.json({ success: true });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [adminUserResult, adminPassResult] = await Promise.all([
      db.query('SELECT setting_value FROM settings WHERE setting_name = $1', ['admin_username']),
      db.query('SELECT setting_value FROM settings WHERE setting_name = $1', ['admin_password'])
    ]);
    
    if (adminUserResult.rows.length === 0 || adminPassResult.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' });
    }
    
    if (username === adminUserResult.rows[0].setting_value && 
        password === adminPassResult.rows[0].setting_value) {
      console.log('Admin login successful with database credentials');
      return res.json({ success: true });
    }
    
    console.log('Admin login failed: invalid credentials');
    return res.json({ success: false, message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  } catch (error) {
    console.error('Error in admin login:', error);
    return res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// ‚≠ê API - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
app.get('/api/admin/time-logs', async (req, res) => {
  console.log('üìä API: admin/time-logs - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', req.query);
  
  try {
    const { from_date, to_date, employee_id, limit = 100, offset = 0 } = req.query;
    
    let query = `
      SELECT t.id, e.emp_code, e.full_name, e.position, e.department, 
             t.clock_in, t.clock_out, t.note, t.status,
             t.latitude_in, t.longitude_in, t.latitude_out, t.longitude_out
      FROM time_logs t
      JOIN employees e ON t.employee_id = e.id
      WHERE 1=1
    `;
    
    const params = [];
    let paramIndex = 1;
    
    if (from_date) {
      query += ` AND DATE(t.clock_in) >= $${paramIndex++}`;
      params.push(from_date);
    }
    
    if (to_date) {
      query += ` AND DATE(t.clock_in) <= $${paramIndex++}`;
      params.push(to_date);
    }
    
    if (employee_id) {
      query += ` AND t.employee_id = $${paramIndex++}`;
      params.push(employee_id);
    }
    
    query += ` ORDER BY t.clock_in DESC LIMIT $${paramIndex++} OFFSET $${paramIndex++}`;
    params.push(limit, offset);
    
    console.log('Running query:', query, 'with params:', params);
    
    const result = await db.query(query, params);
    
    console.log(`Found ${result.rows.length} time logs`);
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const formattedLogs = result.rows.filter(log => log && log.clock_in).map(log => {
      const clockInDate = new Date(new Date(log.clock_in).getTime() + (7 * 60 * 60 * 1000));
      const clockOutDate = log.clock_out ? new Date(new Date(log.clock_out).getTime() + (7 * 60 * 60 * 1000)) : null;
      
      return {
        ...log,
        clock_in_date: clockInDate.toLocaleDateString('th-TH'),
        clock_in_time: clockInDate.toLocaleTimeString('th-TH'),
        clock_out_date: clockOutDate ? clockOutDate.toLocaleDateString('th-TH') : '',
        clock_out_time: clockOutDate ? clockOutDate.toLocaleTimeString('th-TH') : '',
        duration: clockOutDate ? calculateDuration(new Date(log.clock_in), new Date(log.clock_out)) : ''
      };
    });
    
    res.json({ success: true, logs: formattedLogs });
  } catch (error) {
    console.error('Error getting time logs:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// ‚≠ê API - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
app.get('/api/admin/employees', async (req, res) => {
  console.log('üë• API: admin/employees - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  
  try {
    const { limit = 100, offset = 0 } = req.query;
    
    const result = await db.query(`
      SELECT id, emp_code, full_name, position, department, 
             line_id, line_name, status, created_at
      FROM employees
      ORDER BY emp_code
      LIMIT $1 OFFSET $2
    `, [limit, offset]);
    
    console.log(`Found ${result.rows.length} employees`);
    res.json({ success: true, employees: result.rows });
  } catch (error) {
    console.error('Error getting employees:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// ‚≠ê API - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
app.post('/api/admin/time-logs', async (req, res) => {
  console.log('‚ûï API: admin/time-logs POST - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà', req.body);
  
  try {
    const { employee_id, clock_in, clock_out, note, skip_notification } = req.body;
    
    if (!employee_id || !clock_in) {
      return res.json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô' });
    }
    
    const empResult = await db.query('SELECT id, full_name FROM employees WHERE id = $1', [employee_id]);
    
    if (empResult.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    const employee = empResult.rows[0];
    
    console.log('üöÄ Starting time processing...');
    
    const adjustedClockIn = processAdminDateTime(clock_in);
    const adjustedClockOut = clock_out ? processAdminDateTime(clock_out) : null;
    
    console.log('‚úÖ Time processing completed');
    console.log('üìä Final times for database:');
    console.log('   Clock In (UTC):', adjustedClockIn);
    console.log('   Clock Out (UTC):', adjustedClockOut);
    
    if (adjustedClockIn) {
      const testDisplay = new Date(adjustedClockIn);
      const thaiDisplay = new Date(testDisplay.getTime() + (7 * 60 * 60 * 1000));
      console.log('üáπüá≠ Will display as Thai time:', thaiDisplay.toLocaleString('th-TH'));
    }
    
    const insertQuery = `
      INSERT INTO time_logs (employee_id, clock_in, clock_out, note, status)
      VALUES ($1, $2, $3, $4, $5)
      RETURNING id
    `;
    
    const result = await db.query(insertQuery, [
      employee_id, 
      adjustedClockIn, 
      adjustedClockOut, 
      note || null,
      'manual'
    ]);
    
    const newId = result.rows[0].id;
    console.log(`‚úÖ Added new time log with ID: ${newId}`);
    
    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (!skip_notification) {
      setImmediate(async () => {
        try {
          const notifySettingResult = await db.query(
            'SELECT setting_value FROM settings WHERE setting_name = $1',
            ['notify_clock_in']
          );
          
          if (notifySettingResult.rows.length > 0 && notifySettingResult.rows[0].setting_value === '1') {
            const clockInForNotify = new Date(adjustedClockIn);
            const thaiTimeForNotify = new Date(clockInForNotify.getTime() + (7 * 60 * 60 * 1000));
            
            const thaiDate = thaiTimeForNotify.toLocaleDateString('th-TH');
            const timeStr = thaiTimeForNotify.toLocaleTimeString('th-TH');
            
            let message =
              `‚è± ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)\n` +
              `üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: *${employee.full_name}*\n` +
              `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: *${thaiDate}*\n` +
              `üïí ‡πÄ‡∏ß‡∏•‡∏≤: *${timeStr}*\n` +
              (note ? `üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: *${note}*\n` : "");
            
            await sendTelegramToAllGroups(message, null, null, employee.full_name);
          }
          
          if (adjustedClockOut) {
            const notifyOutSettingResult = await db.query(
              'SELECT setting_value FROM settings WHERE setting_name = $1',
              ['notify_clock_out']
            );
            
            if (notifyOutSettingResult.rows.length > 0 && notifyOutSettingResult.rows[0].setting_value === '1') {
              const clockOutForNotify = new Date(adjustedClockOut);
              const thaiTimeForNotify = new Date(clockOutForNotify.getTime() + (7 * 60 * 60 * 1000));
              
              const thaiDate = thaiTimeForNotify.toLocaleDateString('th-TH');
              const timeStr = thaiTimeForNotify.toLocaleTimeString('th-TH');
              
              let message =
                `‚è± ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)\n` +
                `üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: *${employee.full_name}*\n` +
                `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: *${thaiDate}*\n` +
                `üïí ‡πÄ‡∏ß‡∏•‡∏≤: *${timeStr}*\n`;
              
              await sendTelegramToAllGroups(message, null, null, employee.full_name);
            }
          }
        } catch (notifyError) {
          console.error('‚ö†Ô∏è Error sending notification:', notifyError.message);
        }
      });
    }
    
    res.json({ success: true, message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', id: newId });
    
  } catch (error) {
    console.error('‚ùå Error adding time log:', error);
    console.error('üìã Stack trace:', error.stack);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// ‚≠ê API - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
app.put('/api/admin/time-logs/:id', async (req, res) => {
  console.log('‚úèÔ∏è API: admin/time-logs/:id PUT - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤', req.params, req.body);
  
  try {
    const { id } = req.params;
    const { clock_in, clock_out, note } = req.body;
    
    const checkResult = await db.query('SELECT id FROM time_logs WHERE id = $1', [id]);
    
    if (checkResult.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤' });
    }
    
    console.log('üöÄ Starting time processing for update...');
    
    const adjustedClockIn = processAdminDateTime(clock_in);
    const adjustedClockOut = clock_out ? processAdminDateTime(clock_out) : null;
    
    console.log('‚úÖ Time processing for update completed');
    console.log('üìä Final times for database update:');
    console.log('   Clock In (UTC):', adjustedClockIn);
    console.log('   Clock Out (UTC):', adjustedClockOut);
    
    const updateQuery = `
      UPDATE time_logs SET 
      clock_in = $1, 
      clock_out = $2, 
      note = $3
      WHERE id = $4
    `;
    
    await db.query(updateQuery, [adjustedClockIn, adjustedClockOut, note, id]);
    
    console.log(`‚úÖ Updated time log ID: ${id}`);
    res.json({ success: true, message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
    
  } catch (error) {
    console.error('‚ùå Error updating time log:', error);
    console.error('üìã Stack trace:', error.stack);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// ‚≠ê API - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
app.delete('/api/admin/time-logs/:id', async (req, res) => {
  console.log('üóëÔ∏è API: admin/time-logs/:id DELETE - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤', req.params);
  
  try {
    const { id } = req.params;
    
    const checkResult = await db.query('SELECT id FROM time_logs WHERE id = $1', [id]);
    
    if (checkResult.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤' });
    }
    
    await db.query('DELETE FROM time_logs WHERE id = $1', [id]);
    
    console.log(`Deleted time log ID: ${id}`);
    res.json({ success: true, message: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
  } catch (error) {
    console.error('Error deleting time log:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// ‚≠ê API - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏•‡πâ‡∏≤‡∏á cache)
app.post('/api/admin/employees', async (req, res) => {
  console.log('‚ûï API: admin/employees POST - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà', req.body);
  
  try {
    const { emp_code, full_name, position, department } = req.body;
    
    if (!emp_code || !full_name) {
      return res.json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•' });
    }
    
    const checkResult = await db.query('SELECT id FROM employees WHERE emp_code = $1', [emp_code]);
    
    if (checkResult.rows.length > 0) {
      return res.json({ success: false, message: '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' });
    }
    
    const insertResult = await db.query(
      `INSERT INTO employees (emp_code, full_name, position, department, status)
       VALUES ($1, $2, $3, $4, $5) RETURNING id`,
      [emp_code, full_name, position || null, department || null, 'active']
    );
    
    // ‡∏•‡πâ‡∏≤‡∏á cache
    clearEmployeeCache();
    
    const newId = insertResult.rows[0].id;
    
    console.log(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID: ${newId}`);
    res.json({ 
      success: true, 
      message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      id: newId
    });
    
  } catch (error) {
    console.error('Error adding employee:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
app.put('/api/admin/employees/:id', async (req, res) => {
  console.log('API: admin/employees/:id PUT - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', req.params, req.body);
  
  try {
    const { id } = req.params;
    const { emp_code, full_name, position, department, status } = req.body;
    
    if (!emp_code || !full_name) {
      return res.json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•' });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const checkResult = await db.query('SELECT id FROM employees WHERE id = $1', [id]);
    
    if (checkResult.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    const duplicateResult = await db.query(
      'SELECT id FROM employees WHERE emp_code = $1 AND id != $2',
      [emp_code, id]
    );
    
    if (duplicateResult.rows.length > 0) {
      return res.json({ success: false, message: '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' });
    }
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    const updateQuery = `
      UPDATE employees SET 
      emp_code = $1, 
      full_name = $2, 
      position = $3, 
      department = $4,
      status = $5
      WHERE id = $6
    `;
    
    await db.query(updateQuery, [
      emp_code, 
      full_name, 
      position || null, 
      department || null,
      status || 'active',
      id
    ]);
    
    console.log(`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ID: ${id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
    res.json({ success: true, message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
    
  } catch (error) {
    console.error('Error updating employee:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (soft delete)
app.delete('/api/admin/employees/:id', async (req, res) => {
  console.log('API: admin/employees DELETE - ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', req.params);
  
  try {
    const { id } = req.params;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const employeeResult = await db.query(
      'SELECT id, full_name FROM employees WHERE id = $1',
      [id]
    );
    
    if (employeeResult.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    const employee = employeeResult.rows[0];
    
    // ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    await db.query(
      'DELETE FROM employees WHERE id = $1',
      [id]
    );
    
    console.log('Permanently deleted employee with ID:', id, '(', employee.full_name, ')');
    res.json({ success: true, message: '‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
  } catch (error) {
    console.error('Error deleting employee:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/admin/settings', async (req, res) => {
  console.log('API: admin/settings - ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  
  try {
    const result = await db.query('SELECT * FROM settings');
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    const filteredSettings = result.rows.map(setting => {
      if (setting.setting_name === 'admin_password') {
        return { ...setting, setting_value: '' };
      }
      return setting;
    });
    
    console.log(`Found ${result.rows.length} settings`);
    res.json({ success: true, settings: filteredSettings });
  } catch (error) {
    console.error('Error getting settings:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
app.post('/api/admin/settings', async (req, res) => {
  console.log('API: admin/settings POST - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', req.body);
  
  try {
    const { settings } = req.body;
    
    if (!Array.isArray(settings) || settings.length === 0) {
      return res.json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
    
    const client = await pool.connect();
    
    try {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô transaction
      await client.query('BEGIN');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      for (const setting of settings) {
        if (setting.name && setting.value !== undefined) {
          await client.query(
            'UPDATE settings SET setting_value = $1 WHERE setting_name = $2',
            [setting.value, setting.name]
          );
        }
      }
      
      await client.query('COMMIT');
      console.log('Settings updated successfully');
      res.json({ success: true, message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
    } catch (err) {
      await client.query('ROLLBACK');
      console.error('Error updating settings:', err);
      res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: ' + err.message });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Error updating settings:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
app.get('/api/admin/dashboard', async (req, res) => {
  console.log('API: admin/dashboard - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ');
  
  try {
    const today = new Date().toISOString().split('T')[0];
    
    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalEmployeesResult = await db.query(
      'SELECT COUNT(*) as count FROM employees WHERE status = $1',
      ['active']
    );
    const totalEmployees = parseInt(totalEmployeesResult.rows[0].count);
    
    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    const checkedInTodayResult = await db.query(
      `SELECT COUNT(DISTINCT employee_id) as count 
       FROM time_logs 
       WHERE DATE(clock_in) = $1`,
      [today]
    );
    const checkedInToday = parseInt(checkedInTodayResult.rows[0].count);
    
    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    const notCheckedOutTodayResult = await db.query(
      `SELECT COUNT(*) as count 
       FROM time_logs 
       WHERE DATE(clock_in) = $1 AND clock_out IS NULL`,
      [today]
    );
    const notCheckedOutToday = parseInt(notCheckedOutTodayResult.rows[0].count);
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    const recentLogsResult = await db.query(
      `SELECT t.id, e.emp_code, e.full_name, t.clock_in, t.clock_out, t.note
       FROM time_logs t
       JOIN employees e ON t.employee_id = e.id
       ORDER BY t.clock_in DESC
       LIMIT 10`
    );
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ null
    const formattedLogs = recentLogsResult.rows.filter(log => log && log.clock_in).map(log => {
      // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
      const clockInDate = new Date(new Date(log.clock_in).getTime() + (7 * 60 * 60 * 1000));
      const clockOutDate = log.clock_out ? new Date(new Date(log.clock_out).getTime() + (7 * 60 * 60 * 1000)) : null;
      
      return {
        ...log,
        clock_in_date: clockInDate.toLocaleDateString('th-TH'),
        clock_in_time: clockInDate.toLocaleTimeString('th-TH'),
        clock_out_time: clockOutDate ? clockOutDate.toLocaleTimeString('th-TH') : ''
      };
    });
    
    console.log('Dashboard data fetched successfully');
    
    res.json({
      success: true,
      dashboard: {
        totalEmployees,
        checkedInToday,
        notCheckedOutToday,
        recentLogs: formattedLogs
      }
    });
  } catch (error) {
    console.error('Error getting dashboard data:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
app.get('/api/reset-admin', async (req, res) => {
  console.log('API: reset-admin - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô');
  
  try {
    const client = await pool.connect();
    
    try {
      await client.query('BEGIN');
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      await client.query(
        'DELETE FROM settings WHERE setting_name = $1 OR setting_name = $2',
        ['admin_username', 'admin_password']
      );
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      await client.query(
        'INSERT INTO settings (setting_name, setting_value, description) VALUES ($1, $2, $3)',
        ['admin_username', 'admin', '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô']
      );
      
      await client.query(
        'INSERT INTO settings (setting_name, setting_value, description) VALUES ($1, $2, $3)',
        ['admin_password', 'admin123', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô']
      );
      
      await client.query('COMMIT');
      console.log('Admin credentials reset successfully');
      res.json({ success: true, message: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
    } catch (err) {
      await client.query('ROLLBACK');
      console.error('Error resetting admin credentials:', err);
      res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + err.message });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Error resetting admin:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏î‡∏∂‡∏á LIFF ID
app.get('/api/getLiffId', async (req, res) => {
  console.log('API: getLiffId - ‡∏î‡∏∂‡∏á LIFF ID');
  
  try {
    const result = await db.query(
      'SELECT setting_value FROM settings WHERE setting_name = $1',
      ['liff_id']
    );
    
    if (result.rows.length > 0) {
      return res.json({ success: true, liffId: result.rows[0].setting_value });
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö LIFF ID ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      return res.json({ success: true, liffId: '2001032478-VR5Akj0k' });
    }
  } catch (error) {
    console.error('Error getting LIFF ID:', error);
    return res.json({ success: false, error: error.message });
  }
});

// API - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô LIFF)
app.post('/api/test-clockin', async (req, res) => {
  console.log('API: test-clockin - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤', req.body);
  
  try {
    const { employee, userinfo } = req.body;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    if (!employee) {
      return res.json({ msg: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™
    const empResult = await db.query('SELECT id FROM employees WHERE emp_code = $1 OR full_name = $1', [employee]);
    
    if (empResult.rows.length === 0) {
      return res.json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    const emp = empResult.rows[0];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const today = new Date().toISOString().split('T')[0];
    
    const checkExistingResult = await db.query(
      'SELECT id FROM time_logs WHERE employee_id = $1 AND DATE(clock_in) = $2',
      [emp.id, today]
    );
    
    if (checkExistingResult.rows.length > 0) {
      return res.json({ 
        msg: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', 
        employee
      });
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
    const now = new Date().toISOString();
    
    await db.query(
      `INSERT INTO time_logs 
      (employee_id, clock_in, note, latitude_in, longitude_in)
      VALUES ($1, $2, $3, $4, $5)`,
      [emp.id, now, userinfo || null, 13.7563 || null, 100.5018 || null]
    );
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
    const utcTime = new Date(now);
    const thaiTime = new Date(utcTime.getTime() + (7 * 60 * 60 * 1000));
    const returnDate = thaiTime.toLocaleTimeString('th-TH');
    
    return res.json({
      msg: 'SUCCESS',
      employee,
      return_date: returnDate,
      return_date_utc: now
    });
  } catch (error) {
    console.error('Error in test clockin:', error);
    return res.json({ msg: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô LIFF)
app.post('/api/test-clockout', async (req, res) => {
  console.log('API: test-clockout - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å', req.body);
  
  try {
    const { employee } = req.body;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    if (!employee) {
      return res.json({ msg: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™
    const empResult = await db.query(
      'SELECT id FROM employees WHERE emp_code = $1 OR full_name = $1',
      [employee]
    );
    
    if (empResult.rows.length === 0) {
      return res.json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    const emp = empResult.rows[0];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const today = new Date().toISOString().split('T')[0];
    
    const recordResult = await db.query(
      'SELECT id, clock_out FROM time_logs WHERE employee_id = $1 AND DATE(clock_in) = $2 ORDER BY clock_in DESC LIMIT 1',
      [emp.id, today]
    );
    
    if (recordResult.rows.length === 0) {
      return res.json({ 
        msg: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', 
        employee
      });
    }
    
    const record = recordResult.rows[0];
    
    if (record.clock_out) {
      return res.json({ 
        msg: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', 
        employee
      });
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å
    const now = new Date().toISOString();
    
    await db.query(
      `UPDATE time_logs SET 
      clock_out = $1, latitude_out = $2, longitude_out = $3
      WHERE id = $4`,
      [now, 13.7563 || null, 100.5018 || null, record.id]
    );
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
    const utcTime = new Date(now);
    const thaiTime = new Date(utcTime.getTime() + (7 * 60 * 60 * 1000));
    const returnDate = thaiTime.toLocaleTimeString('th-TH');
    
    return res.json({
      msg: 'SUCCESS',
      employee,
      return_date: returnDate,
      return_date_utc: now
    });
  } catch (error) {
    console.error('Error in test clockout:', error);
    return res.json({ msg: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
app.get('/api/admin/time-logs/:id', async (req, res) => {
  console.log('API: admin/time-logs/:id - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', req.params);
  
  try {
    const { id } = req.params;
    
    const result = await db.query(`
      SELECT t.id, t.employee_id, e.emp_code, e.full_name, e.position, e.department, 
             t.clock_in, t.clock_out, t.note, t.status
      FROM time_logs t
      JOIN employees e ON t.employee_id = e.id
      WHERE t.id = $1
    `, [id]);
    
    if (result.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤' });
    }
    
    const log = result.rows[0];
    
    res.json({ success: true, log });
  } catch (error) {
    console.error('Error getting time log:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡πÄ‡∏ß‡∏•‡∏≤
app.get('/api/getTimeOffset', async (req, res) => {
  console.log('API: getTimeOffset - ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡πÄ‡∏ß‡∏•‡∏≤');
  
  try {
    const result = await db.query(
      'SELECT setting_value FROM settings WHERE setting_name = $1',
      ['time_offset']
    );
    
    if (result.rows.length > 0) {
      return res.json({ success: true, time_offset: result.rows[0].setting_value });
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      return res.json({ success: true, time_offset: 420 }); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 7 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (420 ‡∏ô‡∏≤‡∏ó‡∏µ)
    }
  } catch (error) {
    console.error('Error getting time offset:', error);
    return res.json({ success: false, error: error.message });
  }
});

// API - ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Excel/CSV
app.post('/api/admin/import-employees', async (req, res) => {
  console.log('API: admin/import-employees - ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå', req.body);
  
  try {
    const { employees, skipExisting } = req.body;
    
    if (!Array.isArray(employees) || employees.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤' });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    for (const emp of employees) {
      if (!emp.emp_code || !emp.full_name) {
        return res.json({ 
          success: false, 
          message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' 
        });
      }
    }
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    const result = {
      success: true,
      total: employees.length,
      imported: 0,
      skipped: 0,
      errors: []
    };
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const client = await pool.connect();
    
    try {
      await client.query('BEGIN');
      
      for (const emp of employees) {
        try {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const checkResult = await client.query(
            'SELECT id FROM employees WHERE emp_code = $1',
            [emp.emp_code]
          );
          
          if (checkResult.rows.length > 0) {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
            if (skipExisting) {
              // ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
              result.skipped++;
              continue;
            } else {
              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏°
              await client.query(
                `UPDATE employees 
                 SET full_name = $1, position = $2, department = $3, status = $4
                 WHERE emp_code = $5`,
                [
                  emp.full_name,
                  emp.position || null,
                  emp.department || null,
                  emp.status || 'active',
                  emp.emp_code
                ]
              );
              
              result.imported++;
            }
          } else {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
            await client.query(
              `INSERT INTO employees 
               (emp_code, full_name, position, department, status)
               VALUES ($1, $2, $3, $4, $5)`,
              [
                emp.emp_code,
                emp.full_name,
                emp.position || null,
                emp.department || null,
                emp.status || 'active'
              ]
            );
            
            result.imported++;
          }
        } catch (error) {
          console.error('Error importing employee:', emp, error);
          
          // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
          result.errors.push({
            emp_code: emp.emp_code,
            full_name: emp.full_name,
            error: error.message
          });
        }
      }
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      await client.query('COMMIT');
      
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('Error in transaction:', error);
      
      return res.json({
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + error.message
      });
    } finally {
      client.release();
    }
    
    console.log('Import result:', result);
    res.json(result);
  } catch (error) {
    console.error('Error importing employees:', error);
    res.json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    });
  }
});

// API - ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
app.post('/api/admin/cleanup-time-logs', async (req, res) => {
  console.log('API: admin/cleanup-time-logs - ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤', req.body);
  
  try {
    const { date_before, employee_id, export_before_delete, cleanup_type } = req.body;
    
    if (!date_before && !cleanup_type) {
      return res.json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
    }
    
    let query = 'SELECT t.id, t.employee_id, e.emp_code, e.full_name, t.clock_in, t.clock_out, t.note, t.status FROM time_logs t JOIN employees e ON t.employee_id = e.id WHERE 1=1';
    const params = [];
    let paramIndex = 1;
    
    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    if (date_before) {
      query += ` AND DATE(t.clock_in) < $${paramIndex++}`;
      params.push(date_before);
    }
    
    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    if (employee_id) {
      query += ` AND t.employee_id = $${paramIndex++}`;
      params.push(employee_id);
    }
    
    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    if (cleanup_type === 'last_month') {
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      const lastMonthDate = new Date();
      lastMonthDate.setMonth(lastMonthDate.getMonth() - 1);
      const firstDayLastMonth = new Date(lastMonthDate.getFullYear(), lastMonthDate.getMonth(), 1);
      const lastDayLastMonth = new Date(lastMonthDate.getFullYear(), lastMonthDate.getMonth() + 1, 0);
      
      query += ` AND DATE(t.clock_in) >= $${paramIndex++} AND DATE(t.clock_in) <= $${paramIndex++}`;
      params.push(firstDayLastMonth.toISOString().split('T')[0]);
      params.push(lastDayLastMonth.toISOString().split('T')[0]);
      
    } else if (cleanup_type === 'last_year') {
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
      const lastYearDate = new Date();
      lastYearDate.setFullYear(lastYearDate.getFullYear() - 1);
      const firstDayLastYear = new Date(lastYearDate.getFullYear(), 0, 1);
      const lastDayLastYear = new Date(lastYearDate.getFullYear(), 11, 31);
      
      query += ` AND DATE(t.clock_in) >= $${paramIndex++} AND DATE(t.clock_in) <= $${paramIndex++}`;
      params.push(firstDayLastYear.toISOString().split('T')[0]);
      params.push(lastDayLastYear.toISOString().split('T')[0]);
      
    } else if (cleanup_type === 'older_than_6_months') {
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
      const sixMonthsAgo = new Date();
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
      
      query += ` AND DATE(t.clock_in) < $${paramIndex++}`;
      params.push(sixMonthsAgo.toISOString().split('T')[0]);
      
    } else if (cleanup_type === 'older_than_1_year') {
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏õ‡∏µ
      const oneYearAgo = new Date();
      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
      
      query += ` AND DATE(t.clock_in) < $${paramIndex++}`;
      params.push(oneYearAgo.toISOString().split('T')[0]);
    }
    
    query += ' ORDER BY t.clock_in DESC';
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
    const dataToDelete = await db.query(query, params);
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    if (dataToDelete.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç' });
    }
    
    // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    let exportData = null;
    if (export_before_delete) {
      exportData = dataToDelete.rows.map(row => {
        const clockInDate = new Date(new Date(row.clock_in).getTime() + (7 * 60 * 60 * 1000));
        const clockOutDate = row.clock_out ? new Date(new Date(row.clock_out).getTime() + (7 * 60 * 60 * 1000)) : null;
        
        return {
          emp_code: row.emp_code,
          full_name: row.full_name,
          clock_in_date: clockInDate.toLocaleDateString('th-TH'),
          clock_in_time: clockInDate.toLocaleTimeString('th-TH'),
          clock_out_date: clockOutDate ? clockOutDate.toLocaleDateString('th-TH') : '',
          clock_out_time: clockOutDate ? clockOutDate.toLocaleTimeString('th-TH') : '',
          note: row.note || '',
          status: row.status
        };
      });
    }
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const idsToDelete = dataToDelete.rows.map(row => row.id);
    
    // ‡πÉ‡∏ä‡πâ IN clause ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
    const batchSize = 1000;
    const totalRecords = idsToDelete.length;
    let deletedCount = 0;
    
    for (let i = 0; i < totalRecords; i += batchSize) {
      const batch = idsToDelete.slice(i, i + batchSize);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á placeholders ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IN clause
      const placeholders = batch.map((_, idx) => `$${idx + 1}`).join(', ');
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î
      const deleteResult = await db.query(
        `DELETE FROM time_logs WHERE id IN (${placeholders})`,
        batch
      );
      
      deletedCount += deleteResult.rowCount;
    }
    
    console.log(`‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
    res.json({
      success: true,
      message: `‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      deleted_count: deletedCount,
      export_data: exportData
    });
    
  } catch (error) {
    console.error('Error cleaning up time logs:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
app.post('/api/admin/cleanup-inactive-employees', async (req, res) => {
  console.log('API: admin/cleanup-inactive-employees - ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', req.body);
  
  try {
    const { include_logs, export_before_delete } = req.body;
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const inactiveEmployees = await db.query(
      'SELECT id, emp_code, full_name FROM employees WHERE status = $1',
      ['inactive']
    );
    
    if (inactiveEmployees.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });
    }
    
    // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    let exportData = null;
    if (export_before_delete) {
      exportData = {
        employees: inactiveEmployees.rows.map(emp => ({
          id: emp.id,
          emp_code: emp.emp_code,
          full_name: emp.full_name
        }))
      };
      
      // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡πâ‡∏ß‡∏¢
      if (include_logs) {
        const employeeIds = inactiveEmployees.rows.map(emp => emp.id);
        const placeholders = employeeIds.map((_, idx) => `$${idx + 1}`).join(', ');
        
        const timeLogs = await db.query(
          `SELECT t.id, t.employee_id, e.emp_code, e.full_name, t.clock_in, t.clock_out, t.note 
           FROM time_logs t 
           JOIN employees e ON t.employee_id = e.id 
           WHERE t.employee_id IN (${placeholders})
           ORDER BY t.clock_in DESC`,
          employeeIds
        );
        
        exportData.time_logs = timeLogs.rows.map(log => {
          const clockInDate = new Date(new Date(log.clock_in).getTime() + (7 * 60 * 60 * 1000));
          const clockOutDate = log.clock_out ? new Date(new Date(log.clock_out).getTime() + (7 * 60 * 60 * 1000)) : null;
          
          return {
            id: log.id,
            emp_code: log.emp_code,
            full_name: log.full_name,
            clock_in_date: clockInDate.toLocaleDateString('th-TH'),
            clock_in_time: clockInDate.toLocaleTimeString('th-TH'),
            clock_out_date: clockOutDate ? clockOutDate.toLocaleDateString('th-TH') : '',
            clock_out_time: clockOutDate ? clockOutDate.toLocaleTimeString('th-TH') : '',
            note: log.note || ''
          };
        });
      }
    }
    
    const client = await pool.connect();
    
    try {
      await client.query('BEGIN');
      
      let deletedLogCount = 0;
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      if (include_logs) {
        const employeeIds = inactiveEmployees.rows.map(emp => emp.id);
        
        // ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
        const batchSize = 100;
        
        for (let i = 0; i < employeeIds.length; i += batchSize) {
          const batchIds = employeeIds.slice(i, i + batchSize);
          const placeholders = batchIds.map((_, idx) => `$${idx + 1}`).join(', ');
          
          const deleteLogsResult = await client.query(
            `DELETE FROM time_logs WHERE employee_id IN (${placeholders})`,
            batchIds
          );
          
          deletedLogCount += deleteLogsResult.rowCount;
        }
      }
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      const employeeIds = inactiveEmployees.rows.map(emp => emp.id);
      const placeholders = employeeIds.map((_, idx) => `$${idx + 1}`).join(', ');
      
      const deleteEmployeesResult = await client.query(
        `DELETE FROM employees WHERE id IN (${placeholders})`,
        employeeIds
      );
      
      await client.query('COMMIT');
      
      console.log(`‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${deleteEmployeesResult.rowCount} ‡∏Ñ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${deletedLogCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
      res.json({
        success: true,
        message: `‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ${deleteEmployeesResult.rowCount} ‡∏Ñ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${deletedLogCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
        deleted_employees: deleteEmployeesResult.rowCount,
        deleted_logs: deletedLogCount,
        export_data: exportData
      });
      
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('Error cleaning up inactive employees:', error);
      res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
    } finally {
      client.release();
    }
    
  } catch (error) {
    console.error('Error cleaning up inactive employees:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö PostgreSQL ‡∏ö‡∏ô Render.com ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô dashboard ‡∏Ç‡∏≠‡∏á Render)
app.get('/api/admin/backup-database', async (req, res) => {
  console.log('API: admin/backup-database - ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á employees ‡πÅ‡∏•‡∏∞ time_logs
    const employeesResult = await db.query('SELECT * FROM employees ORDER BY id');
    const timeLogsResult = await db.query('SELECT * FROM time_logs ORDER BY id');
    const settingsResult = await db.query('SELECT * FROM settings ORDER BY id');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á
    const backupData = {
      timestamp: new Date().toISOString(),
      employees: employeesResult.rows,
      time_logs: timeLogsResult.rows,
      settings: settingsResult.rows.filter(s => s.setting_name !== 'admin_password') // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á
    };
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
    const backupJSON = JSON.stringify(backupData, null, 2);
    
    // ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    res.setHeader('Content-Disposition', `attachment; filename=time_tracker_backup_${new Date().toISOString().split('T')[0]}.json`);
    res.setHeader('Content-Type', 'application/json');
    res.send(backupJSON);
    
  } catch (error) {
    console.error('Error backing up database:', error);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô CSV
app.post('/api/admin/export-time-logs', async (req, res) => {
  console.log('API: admin/export-time-logs - ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤', req.body);
  
  try {
    const { from_date, to_date, employee_id, format } = req.body;
    
    let query = `
      SELECT e.emp_code, e.full_name, e.position, e.department, 
             t.clock_in, t.clock_out, t.note, t.status,
             t.latitude_in, t.longitude_in, t.latitude_out, t.longitude_out
      FROM time_logs t
      JOIN employees e ON t.employee_id = e.id
      WHERE 1=1
    `;
    
    const params = [];
    let paramIndex = 1;
    
    if (from_date) {
      query += ` AND DATE(t.clock_in) >= $${paramIndex++}`;
      params.push(from_date);
    }
    
    if (to_date) {
      query += ` AND DATE(t.clock_in) <= $${paramIndex++}`;
      params.push(to_date);
    }
    
    if (employee_id) {
      query += ` AND t.employee_id = $${paramIndex++}`;
      params.push(employee_id);
    }
    
    query += ' ORDER BY t.clock_in DESC';
    
    const result = await db.query(query, params);
    
    if (result.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç' });
    }
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const formattedLogs = result.rows.map(log => {
      const clockInDate = new Date(new Date(log.clock_in).getTime() + (7 * 60 * 60 * 1000));
      const clockOutDate = log.clock_out ? new Date(new Date(log.clock_out).getTime() + (7 * 60 * 60 * 1000)) : null;
      
      return {
        "‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô": log.emp_code,
        "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•": log.full_name,
        "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á": log.position || '',
        "‡πÅ‡∏ú‡∏ô‡∏Å": log.department || '',
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô": clockInDate.toLocaleDateString('th-TH'),
        "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô": clockInDate.toLocaleTimeString('th-TH'),
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô": clockOutDate ? clockOutDate.toLocaleDateString('th-TH') : '',
        "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô": clockOutDate ? clockOutDate.toLocaleTimeString('th-TH') : '',
        "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏": log.note || '',
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": log.status,
        "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏Ç‡πâ‡∏≤": log.latitude_in && log.longitude_in ? `${log.latitude_in}, ${log.longitude_in}` : '',
        "‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏≠‡∏≠‡∏Å": log.latitude_out && log.longitude_out ? `${log.latitude_out}, ${log.longitude_out}` : ''
      };
    });
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    res.json({
      success: true,
      data: formattedLogs,
      count: formattedLogs.length
    });
    
  } catch (error) {
    console.error('Error exporting time logs:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.post('/api/admin/delete-all-employees', async (req, res) => {
  console.log('API: admin/delete-all-employees - ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', req.body);
  
  try {
    const { confirm } = req.body;
    
    if (!confirm) {
      return res.json({ success: false, message: '‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }
    
    const client = await pool.connect();
    
    try {
      await client.query('BEGIN');
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ foreign key
      const deleteLogsResult = await client.query('DELETE FROM time_logs');
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const deleteEmployeesResult = await client.query('DELETE FROM employees');
      
      await client.query('COMMIT');
      
      console.log(`‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${deleteEmployeesResult.rowCount} ‡∏Ñ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${deleteLogsResult.rowCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      res.json({
        success: true,
        message: '‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        deleted_count: deleteEmployeesResult.rowCount,
        deleted_logs: deleteLogsResult.rowCount
      });
      
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('Error deleting all employees:', error);
      res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
    } finally {
      client.release();
    }
    
  } catch (error) {
    console.error('Error deleting all employees:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// API - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
app.get('/api/admin/employees/:id', async (req, res) => {
  console.log('API: admin/employees/:id - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', req.params);
  
  try {
    const { id } = req.params;
    
    const result = await db.query(`
      SELECT id, emp_code, full_name, position, department, 
             line_id, line_name, status, created_at
      FROM employees
      WHERE id = $1
    `, [id]);
    
    if (result.rows.length === 0) {
      return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' });
    }
    
    const employee = result.rows[0];
    
    res.json({ success: true, employee });
  } catch (error) {
    console.error('Error getting employee:', error);
    res.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
app.get('/admin/*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', req.path));
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
// Export for Vercel
module.exports = app;

// For local development
if (process.env.NODE_ENV !== 'production') {
  const port = process.env.PORT || 3000;
  app.listen(port, () => {
    console.log(`Server running on port ${port}`);
  });
}